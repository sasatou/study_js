js チートシート

よく使う書き方

var 変数 = document.querySelector('単一の要素'); <- classを取得できる?でいいんだよね？
var 変数 = document.querySelectorAll('複数の要素');


○ 要素の取得で迷うところ
getElementsByTagName
 -> 指定したタグ名を持つリスト（NodeList）を取得するメソッド。
    -> getElementsByTagName('li');

querySelectorAll
 -> CSSセレクタにマッチする要素のリスト（NodeList）を取得するメソッド。
    -> querySelectorAll('#list1 > li');



イベント関連 =================================================

removeEventListener
 -> addEventListenerで登録されたイベントリスナーを削除します。

transitionend
 -> cssの transitionendを確認後発火させる

テクニック =================================================

○ クラスの付け替えのハンドリングに良さそう
  btn.className = btn.className === '' ? 'on' : '';

○ ランダムな数字を生成する
  変数宣言 = (メソッド(メソッド() * 生成したい桁数) + 調整(jsだと0からすたーとするので)
  var randomNumber = Math.floor(Math.random() * 100) +1

○ 要素の最初の子供がいる限り要素を消し続ける、消す要素は要素の最初の子供
  while(tbody.firstChild) {
    tbody.removeChild(tbody.firstChild);
    }


○ ソートの流れ(英数字のみ)

  var sortOrder = 1; // 1:昇順、 -1:降順

    var col = this.cellIndex; // thisの状態を受ける
    var type = this.dataset.type; // string, numberを判定

    // ソートアルファベット順
    rows.sort(function(a, b) { // tr, tr
      if(type === "number") {
        // tr から取り出す変数を_a, _b
        // 取得した文字列に1掛けると数字として判定してくれる
        var _a = a.children[col].textContent * 1;
        var _b = b.children[col].textContent * 1;
      }
      if(type === "string") {
        // a(tr).children(td)の[col](選択した要素)のテキスト要素を小文字にして返す
        var _a = a.children[col].textContent.toLowerCase();
        var _b = b.children[col].textContent.toLowerCase();
      }
      if (_a < _b){
        return -1 * sortOrder;
      }
      if (_a > _b) {
        return 1 * sortOrder;
      }
      return 0;
    });
    // console.log(rows);

    sortOrder *= -1;



単語としてまず覚える =================================================

〜がなかったらという指定方法

this.className.indexOf('class名') === -1
 -> クリックイベントを仕込んでいたとしたら
    クリックした要素に指定したclass名があるか検索 、
    もし指定したclass名がなかったら-1が返ってくるので
    それと同義の意味


○ NodeListを配列化
var x = Array.prototype.slice.call(document.querySelectorAll('tbody > tr'));
tbody 直下のtrを取得配列化してくれる。
[tr, tr, tr, tr, tr, tr]

○ ソートアルファベット順
    arr.sort(function(a, b) {
      if (a < b){
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    });


〜を生成 =================================================

○ テキストを生成
変数や要素.textContent = 'テキスト';

○ クラスをつける
変数や要素名.className = 'class名';

○ タグを生成
document.createElement('button');

○ 画像の置き換え
this.src = 'img/coin.png';

構文 ===================================================

変数
  var, let, const

  定数は大文字?
    const DATE

  プライベート変数?
  var _a =


条件分岐

・if文
  if (条件){
    真
    } else {
    偽
    }


・三項演算子
    var a, b, c;
    if (条件){
      a = b;
    } else {
      a = c;
    }

    a = (条件) ? b : c;

・switch文
    switch (expression) {
      case expression:
        break;
      default:
    }


・ループ処理
  - while
    while (true) {

    }

  - do .. whill
    構文
    do {

    } while (true);

  - for文
    for (var i = 0; i < array.length; i++) {
      array[i]
    }

・配列

  - グループ
    var 変数 = [data1, data2, data3];
    console.log(変数[添字]) //添字は 0,1,2....

  - オブジェクト
    var user = {
      プロパティ: "プロパティネーム",
      score: 999
    }

  - メッソド
    オブジェクトの要素内に関数を設置

比較演算子 ===================================================


=== 	      右辺と左辺が厳密に同一の値であるかを判定します	   5 === 2 + 4
!==   	    右辺と左辺が厳密に同一の値ではないことを判定します	5 !== 2 + 3
<	小なり	    左辺の値が右辺の値より小さいこととを判定します	   10 < 6
>	大なり	    左辺の値が右辺の値より大きいことを判定します	    10 > 20
<=	以下なり  左辺の値が右辺の値以下であることを判定します	   3 <= 2
>=	以上なり	左辺の値が右辺の値以上であることを判定します	   5 >= 4

ノード ========================================================

innerHTML             指定した要素の内側
parentNode            親ノード
removeChild           DOM から子ノードを取り除く

createElement         指定した HTML 要素を生成
appendChild           特定の親ノードの子ノードリストの末尾にノードを追加

createTextNode        新しいテキストノードを生成

getElementsByTagName  与えられたタグ名を持つ要素のHTMLCollectionを返す

className             要素のclass属性の値の取得 / 設定に用い
title                 ノードの title 属性の値を取得 / 設定

previousSibling       指定されたノードの直前のノードを返す 最前だとnull
nextSibling           指定されたノードの直後のノードを返す 最後だとnull

replaceChild          指定ノードの子ノードを別のノードに置き換える
cloneNode             現在のノードの複製を返す

getAttribute          指定の要素について名前付けされた属性の値を返す
setAttribute          指定の要素に新しい属性を追加します



キーコードの探し方 =================================================

window.addEventListener('keyup', function(e) {
  console.log(e.keyCode)
});


理解でき始めたら  ========================================================

var arr = [1,2,3,4,5,6,7,8,9];
var a = arr.length;

○ シャッフルアルゴリズム
while (a) {
    var j = Math.floor( Math.random() * a );
    var t = arr[--a];
    arr[a] = arr[j];
    arr[j] = t;
}

○ シャッフルされた配列の要素を順番に表示する
arr.forEach( function( value ) {console.log( value )} );



========================================================
